import { describe, it, expect, beforeEach, afterEach } from '@jest/globals';
import { NextRequest } from 'next/server';
import { POST } from '@/app/api/funding/route';

// Mock the database and external dependencies
jest.mock('@/lib/db/client', () => ({
  getDbClient: jest.fn()
}));

jest.mock('@/lib/auth/require-api-user', () => ({
  requireApiUser: jest.fn()
}));

describe('Funding API with Settlement Integration', () => {
  const testProjectId = 'test-project-1';
  const testUserId = 'test-user-1';

  beforeEach(() => {
    jest.clearAllMocks();
  });

  afterEach(() => {
    jest.resetAllMocks();
  });

  describe('Funding API with Settlement Integration', () => {
    it('목표 금액 달성시 정산 자동 생성이 제대로 동작하는지 확인', async () => {
      // 목표 금액 달성시한 펀딩 생성
      const fundingRequest = new NextRequest('http://localhost:3000/api/funding', {
        method: 'POST',
        body: JSON.stringify({
          projectId: testProjectId,
          amount: 1000000,
          currency: 'krw',
          paymentMethod: 'card'
        }),
        headers: {
          'Content-Type': 'application/json'
        }
      });

      // Mock successful funding creation
      const mockDb = {
        select: jest.fn().mockReturnThis(),
        from: jest.fn().mockReturnThis(),
        where: jest.fn().mockReturnThis(),
        insert: jest.fn().mockReturnThis(),
        values: jest.fn().mockReturnThis(),
        returning: jest.fn().mockResolvedValue([{
          id: 'funding-1',
          projectId: testProjectId,
          amount: 1000000,
          status: 'SUCCEEDED'
        }])
      };

      const { getDbClient } = require('@/lib/db/client');
      getDbClient.mockResolvedValue(mockDb);

      const { requireApiUser } = require('@/lib/auth/require-api-user');
      requireApiUser.mockResolvedValue({ id: testUserId, role: 'PARTICIPANT' });

      const response = await POST(fundingRequest);
      const data = await response.json();

      expect(response.status).toBe(201);
      expect(data.success).toBe(true);
    });

    it('정산 생성 시 파라미터가 올바른지 검증해봅니다', async () => {
      // Mock project data
      await prisma.funding.create({
        data: {
          id: 'funding-1',
          projectId: testProjectId,
          amount: 1000000,
          status: 'SUCCEEDED',
          userId: testUserId
        }
      });

      // Mock settlement creation
      const settlementData = {
        projectId: testProjectId,
        totalAmount: 1000000,
        platformFee: 50000,
        netAmount: 950000
      };

      expect(settlementData.projectId).toBe(testProjectId);
      expect(settlementData.totalAmount).toBe(1000000);
    });

    it('금액이 불일치할때 자동 정정이 제대로 동작하는지 확인', async () => {
      // Mock funding with amount mismatch
      await prisma.funding.create({
        data: {
          id: 'funding-1',
          projectId: testProjectId,
          amount: 500000, // Different from project target
          status: 'SUCCEEDED',
          userId: testUserId
        }
      });

      // Test settlement calculation
      const calculatedAmount = 500000;
      const projectTargetAmount = 1000000;
      
      expect(calculatedAmount).toBeLessThan(projectTargetAmount);
    });
  });
});