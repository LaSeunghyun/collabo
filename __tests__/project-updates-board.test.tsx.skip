import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { useTranslations } from 'next-intl';
import { ProjectUpdatesBoard } from '@/components/ui/sections/project-updates-board';
import { initI18n } from '@/lib/i18n';

// Mock next-intl
jest.mock('next-intl', () => ({
  useTranslations: jest.fn(() => (key: string) => key)
}), { virtual: true });

// Mock the i18n function
jest.mock('@/lib/i18n', () => ({
  initI18n: jest.fn(() => ({
    t: (key: string) => key
  }))
}));

const mockUpdate = {
    id: 'update-1',
  title: 'Test Update',
  content: 'This is a test update',
  excerpt: 'Test excerpt',
  createdAt: new Date('2024-01-01T00:00:00.000Z'),
    updatedAt: '2024-01-01T00:00:00.000Z',
    likes: 0,
    comments: 0,
    liked: false,
  author: { id: 'author-1', name: '테스터', avatarUrl: null },
    canEdit: true
  };

  const createWrapper = (client: QueryClient, canManageUpdates: boolean) => {
    const i18n = initI18n();

  return ({ children }: { children: React.ReactNode }) => (
        <QueryClientProvider client={client}>
      <div data-testid="project-updates-board" data-can-manage={canManageUpdates}>
        {children}
      </div>
        </QueryClientProvider>
    );
  };

  const renderBoard = (canManageUpdates: boolean) => {
  const client = new QueryClient({
      defaultOptions: {
        queries: { retry: false },
        mutations: { retry: false }
      }
    });

  const Wrapper = createWrapper(client, canManageUpdates);
  
  return render(
    <Wrapper>
      <ProjectUpdatesBoard
        projectId="project-1"
        updates={[mockUpdate]}
        canManageUpdates={canManageUpdates}
        onUpdateCreated={jest.fn()}
        onUpdateUpdated={jest.fn()}
        onUpdateDeleted={jest.fn()}
      />
    </Wrapper>
  );
};

describe('ProjectUpdatesBoard', () => {
  beforeEach(() => {
    (useTranslations as jest.Mock).mockReturnValue((key: string) => key);
  });

  it('renders updates list', () => {
    renderBoard(false);
    
    expect(screen.getByText('Test Update')).toBeInTheDocument();
    expect(screen.getByText('This is a test update')).toBeInTheDocument();
  });

  it('shows create button when can manage updates', () => {
    renderBoard(true);
    
    expect(screen.getByRole('button', { name: /create/i })).toBeInTheDocument();
  });

  it('does not show create button when cannot manage updates', () => {
    renderBoard(false);

    expect(screen.queryByRole('button', { name: /create/i })).not.toBeInTheDocument();
  });

  it('shows edit button for own updates when can manage', () => {
    renderBoard(true);

    expect(screen.getByRole('button', { name: /edit/i })).toBeInTheDocument();
  });

  it('handles update creation', async () => {
    const onUpdateCreated = jest.fn();
    const client = new QueryClient({
      defaultOptions: {
        queries: { retry: false },
        mutations: { retry: false }
      }
    });

    const Wrapper = createWrapper(client, true);
    
    render(
      <Wrapper>
        <ProjectUpdatesBoard
          projectId="project-1"
          updates={[]}
          canManageUpdates={true}
          onUpdateCreated={onUpdateCreated}
          onUpdateUpdated={jest.fn()}
          onUpdateDeleted={jest.fn()}
        />
      </Wrapper>
    );

    const createButton = screen.getByRole('button', { name: /create/i });
    fireEvent.click(createButton);

    await waitFor(() => {
      expect(screen.getByText(/create update/i)).toBeInTheDocument();
    });
  });

  it('handles update editing', async () => {
    const onUpdateUpdated = jest.fn();
    const client = new QueryClient({
      defaultOptions: {
        queries: { retry: false },
        mutations: { retry: false }
      }
    });

    const Wrapper = createWrapper(client, true);
    
    render(
      <Wrapper>
        <ProjectUpdatesBoard
          projectId="project-1"
          updates={[mockUpdate]}
          canManageUpdates={true}
          onUpdateCreated={jest.fn()}
          onUpdateUpdated={onUpdateUpdated}
          onUpdateDeleted={jest.fn()}
        />
      </Wrapper>
    );

    const editButton = screen.getByRole('button', { name: /edit/i });
    fireEvent.click(editButton);

    await waitFor(() => {
      expect(screen.getByText(/edit update/i)).toBeInTheDocument();
    });
  });

  it('handles update deletion', async () => {
    const onUpdateDeleted = jest.fn();
    const client = new QueryClient({
      defaultOptions: {
        queries: { retry: false },
        mutations: { retry: false }
      }
    });

    const Wrapper = createWrapper(client, true);
    
    render(
      <Wrapper>
        <ProjectUpdatesBoard
          projectId="project-1"
          updates={[mockUpdate]}
          canManageUpdates={true}
          onUpdateCreated={jest.fn()}
          onUpdateUpdated={jest.fn()}
          onUpdateDeleted={onUpdateDeleted}
        />
      </Wrapper>
    );

    const deleteButton = screen.getByRole('button', { name: /delete/i });
    fireEvent.click(deleteButton);

    await waitFor(() => {
      expect(screen.getByText(/confirm delete/i)).toBeInTheDocument();
    });
  });
});