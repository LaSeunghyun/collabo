generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CREATOR
  PARTICIPANT
  PARTNER
  ADMIN
}

enum ProjectStatus {
  DRAFT
  REVIEWING
  LIVE
  SUCCESSFUL
  FAILED
  EXECUTING
  COMPLETED
}

enum FundingStatus {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentProvider {
  STRIPE
  TOSS
  PAYPAL
  MANUAL
}

enum SettlementPayoutStatus {
  PENDING
  IN_PROGRESS
  PAID
}

enum SettlementStakeholderType {
  PLATFORM
  CREATOR
  PARTNER
  COLLABORATOR
  OTHER
}

enum PartnerType {
  STUDIO
  VENUE
  PRODUCTION
  MERCHANDISE
  OTHER
}

enum PartnerMatchStatus {
  REQUESTED
  ACCEPTED
  DECLINED
  CANCELLED
  COMPLETED
}

enum ProductType {
  PHYSICAL
  DIGITAL
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  REFUNDED
  CANCELLED
}

enum PostType {
  UPDATE
  DISCUSSION
  AMA
}

enum CommunityCategory {
  GENERAL
  NOTICE
  COLLAB
  SUPPORT
  SHOWCASE
}

enum NotificationType {
  FUNDING_SUCCESS
  NEW_COMMENT
  PROJECT_MILESTONE
  PARTNER_REQUEST
  SETTLEMENT_PAID
  SYSTEM
}

enum MilestoneStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  RELEASED
}

enum ModerationTargetType {
  POST
  COMMENT
}

enum ModerationStatus {
  PENDING
  REVIEWING
  ACTION_TAKEN
  DISMISSED
}

model User {
  id               String                @id @default(cuid())
  name             String
  email            String                @unique
  role             UserRole              @default(PARTICIPANT)
  passwordHash     String?
  avatarUrl        String?
  language         String                @default("ko")
  timezone         String?
  bio              String?
  socialLinks      Json?
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  projects         Project[]             @relation("OwnerProjects")
  collaborations   ProjectCollaborator[]
  fundings         Funding[]
  posts            Post[]
  comments         Comment[]
  postLikes        PostLike[]
  postDislikes     PostDislike[]
  commentReactions CommentReaction[]
  notifications    Notification[]
  partner          Partner?
  orders           Order[]
  wallet           Wallet?
  auditLogs        AuditLog[]
  permissions      UserPermission[]
  following        UserFollow[]          @relation("UserFollowing")
  followers        UserFollow[]          @relation("UserFollowers")
  filedReports     ModerationReport[]    @relation("ModerationReportReporter")
  blockedUsers     UserBlock[]           @relation("UserBlocker")
  blockedBy        UserBlock[]           @relation("UserBlocked")
}

model Project {
  id                String                @id @default(cuid())
  title             String
  description       String
  category          String
  targetAmount      Int
  currentAmount     Int                   @default(0)
  currency          String                @default("KRW")
  status            ProjectStatus         @default(DRAFT)
  startDate         DateTime?
  endDate           DateTime?
  rewardTiers       Json?
  milestones        Json?
  thumbnail         String?
  metadata          Json?
  owner             User                  @relation("OwnerProjects", fields: [ownerId], references: [id])
  ownerId           String
  collaborators     ProjectCollaborator[]
  fundings          Funding[]
  settlements       Settlement[]
  partnerMatches    PartnerMatch[]
  products          Product[]
  posts             Post[]
  milestoneEntries  ProjectMilestone[]
  rewardTierEntries ProjectRewardTier[]
  requirements      ProjectRequirement[]
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
}

model ProjectCollaborator {
  id        String   @id @default(cuid())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  role      String?
  share     Int?
  createdAt DateTime @default(now())

  @@unique([projectId, userId])
}

model Funding {
  id              String              @id @default(cuid())
  project         Project             @relation(fields: [projectId], references: [id])
  projectId       String
  user            User                @relation(fields: [userId], references: [id])
  userId          String
  amount          Int
  currency        String              @default("KRW")
  paymentIntentId String?             @unique
  paymentStatus   FundingStatus       @default(PENDING)
  rewardTier      Json?
  metadata        Json?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  refundedAt      DateTime?
  transaction     PaymentTransaction?
}

model Settlement {
  id                    String                 @id @default(cuid())
  project               Project                @relation(fields: [projectId], references: [id])
  projectId             String
  totalRaised           Int
  platformFee           Int
  creatorShare          Int
  partnerShare          Int                    @default(0)
  collaboratorShare     Int                    @default(0)
  gatewayFees           Int                    @default(0)
  netAmount             Int                    @default(0)
  payoutStatus          SettlementPayoutStatus @default(PENDING)
  distributionBreakdown Json?
  notes                 Json?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  payouts               SettlementPayout[]
}

model Partner {
  id           String         @id @default(cuid())
  user         User           @relation(fields: [userId], references: [id])
  userId       String         @unique
  type         PartnerType
  name         String
  description  String?
  services     Json?
  pricingModel String?
  rating       Float?
  contactInfo  String
  verified     Boolean        @default(false)
  location     String?
  availability Json?
  portfolioUrl String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  matches      PartnerMatch[]
}

model PartnerMatch {
  id              String             @id @default(cuid())
  project         Project            @relation(fields: [projectId], references: [id])
  projectId       String
  partner         Partner            @relation(fields: [partnerId], references: [id])
  partnerId       String
  status          PartnerMatchStatus @default(REQUESTED)
  quote           Int?
  settlementShare Float?
  contractUrl     String?
  requirements    Json?
  responseMessage String?
  notes           Json?
  acceptedAt      DateTime?
  completedAt     DateTime?
  cancelledAt     DateTime?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
}

model Product {
  id         String      @id @default(cuid())
  project    Project     @relation(fields: [projectId], references: [id])
  projectId  String
  name       String
  type       ProductType
  price      Int
  currency   String      @default("KRW")
  inventory  Int?
  images     String[]    @default([])
  metadata   Json?
  sku        String?
  isActive   Boolean     @default(true)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderItems OrderItem[]
}

model Order {
  id            String      @id @default(cuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  totalPrice    Int
  subtotal      Int
  currency      String      @default("KRW")
  orderStatus   OrderStatus @default(PENDING)
  shippingCost  Int?
  taxAmount     Int?
  discountTotal Int?
  shippingInfo  Json?
  transactionId String?
  metadata      Json?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  items         OrderItem[]
}

model Post {
  id          String     @id @default(cuid())
  project     Project?   @relation(fields: [projectId], references: [id])
  projectId   String?
  author      User       @relation(fields: [authorId], references: [id])
  authorId    String
  title       String
  content     String
  type        PostType   @default(UPDATE)
  excerpt     String?
  tags        String[]   @default([])
  category    CommunityCategory @default(GENERAL)
  language    String     @default("ko")
  scheduledAt DateTime?
  publishedAt DateTime?
  isPinned    Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  likes       PostLike[]
  dislikes    PostDislike[]
  comments    Comment[]
}

model Comment {
  id              String            @id @default(cuid())
  post            Post              @relation(fields: [postId], references: [id])
  postId          String
  author          User              @relation(fields: [authorId], references: [id])
  authorId        String
  content         String
  parent          Comment?          @relation("CommentReplies", fields: [parentCommentId], references: [id])
  parentCommentId String?
  replies         Comment[]         @relation("CommentReplies")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  editedAt        DateTime?
  deletedAt       DateTime?
  isDeleted       Boolean           @default(false)
  reactions       CommentReaction[]
}

model PostLike {
  id        String   @id @default(cuid())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@unique([postId, userId])
}

model PostDislike {
  id        String   @id @default(cuid())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@unique([postId, userId])
}

model Notification {
  id        String           @id @default(cuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  type      NotificationType
  payload   Json
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
}

model Wallet {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  balance        Int      @default(0)
  pendingBalance Int      @default(0)
  currency       String   @default("KRW")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model AuditLog {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  entity    String
  entityId  String
  action    String
  data      Json?
  ipAddress String?
  userAgent String?
  metadata  Json?
  createdAt DateTime @default(now())
}

model Permission {
  id          String           @id @default(cuid())
  key         String           @unique
  description String?
  users       UserPermission[]
  createdAt   DateTime         @default(now())
}

model UserPermission {
  id           String     @id @default(cuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String
  assignedAt   DateTime   @default(now())

  @@unique([userId, permissionId])
}

model PaymentTransaction {
  id         String          @id @default(cuid())
  funding    Funding         @relation(fields: [fundingId], references: [id])
  fundingId  String          @unique
  provider   PaymentProvider
  externalId String
  status     FundingStatus
  amount     Int
  currency   String          @default("KRW")
  gatewayFee Int?            @default(0)
  rawPayload Json?
  metadata   Json?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}

model SettlementPayout {
  id              String                    @id @default(cuid())
  settlement      Settlement                @relation(fields: [settlementId], references: [id])
  settlementId    String
  stakeholderType SettlementStakeholderType
  stakeholderId   String?
  amount          Int
  percentage      Float?
  status          SettlementPayoutStatus    @default(PENDING)
  dueDate         DateTime?
  paidAt          DateTime?
  metadata        Json?
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
}

model ProjectMilestone {
  id            String          @id @default(cuid())
  project       Project         @relation(fields: [projectId], references: [id])
  projectId     String
  title         String
  description   String?
  dueDate       DateTime?
  releaseAmount Int?
  status        MilestoneStatus @default(PLANNED)
  order         Int             @default(0)
  completedAt   DateTime?
  releasedAt    DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model ProjectRewardTier {
  id                String    @id @default(cuid())
  project           Project   @relation(fields: [projectId], references: [id])
  projectId         String
  title             String
  description       String?
  minimumAmount     Int
  limit             Int?
  claimed           Int       @default(0)
  includes          String[]  @default([])
  estimatedDelivery DateTime?
  metadata          Json?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model ProjectRequirement {
  id        String    @id @default(cuid())
  project   Project   @relation(fields: [projectId], references: [id])
  projectId String
  category  String
  minBudget Int?
  maxBudget Int?
  location  String?
  services  String[]  @default([])
  startDate DateTime?
  endDate   DateTime?
  notes     Json?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model OrderItem {
  id         String   @id @default(cuid())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  quantity   Int      @default(1)
  unitPrice  Int
  totalPrice Int
  metadata   Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model UserFollow {
  id          String   @id @default(cuid())
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("UserFollowers", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model CommentReaction {
  id        String   @id @default(cuid())
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String   @default("LIKE")
  createdAt DateTime @default(now())

  @@unique([commentId, userId, type])
}

model ModerationReport {
  id         String               @id @default(cuid())
  reporter   User?                @relation("ModerationReportReporter", fields: [reporterId], references: [id])
  reporterId String?
  targetType ModerationTargetType
  targetId   String
  reason     String?
  status     ModerationStatus     @default(PENDING)
  notes      Json?
  createdAt  DateTime             @default(now())
  resolvedAt DateTime?
}

model UserBlock {
  id             String @id @default(cuid())
  blocker        User   @relation("UserBlocker", fields: [blockerId], references: [id])
  blockerId      String
  blocked        User   @relation("UserBlocked", fields: [blockedUserId], references: [id])
  blockedUserId  String
  createdAt      DateTime @default(now())

  @@unique([blockerId, blockedUserId])
}
