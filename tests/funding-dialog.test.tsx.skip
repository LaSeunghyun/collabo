import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { signIn } from 'next-auth/react';
import { FundingDialog } from '@/components/ui/funding-dialog';

// Mock next-auth
jest.mock('next-auth/react', () => ({
  signIn: jest.fn(),
  useSession: jest.fn(() => ({ data: null, status: 'unauthenticated' }))
}));

// Mock fetch
const mockFetch = jest.fn();
global.fetch = mockFetch;

const mockProject = {
  id: 'project-1',
  title: 'Test Project',
  description: 'A test project',
  targetAmount: 1000000,
  currentAmount: 500000,
  currency: 'KRW',
  status: 'LIVE' as const,
  owner: {
    id: 'owner-1',
    name: 'Owner',
    avatarUrl: null
  }
};

const createWrapper = (client: QueryClient) => {
  return ({ children }: { children: React.ReactNode }) => (
    <QueryClientProvider client={client}>
      {children}
    </QueryClientProvider>
  );
};

describe('FundingDialog', () => {
  let mockSignIn: jest.MockedFunction<typeof signIn>;

  beforeEach(() => {
    mockSignIn = signIn as jest.MockedFunction<typeof signIn>;
    mockSignIn.mockClear();
    mockFetch.mockClear();
  });

  it('opens dialog and shows project info when trigger is clicked', () => {
    const client = new QueryClient();
    const Wrapper = createWrapper(client);

    render(
      <Wrapper>
        <FundingDialog project={mockProject}>
          <button>로그인하여 후원하기</button>
        </FundingDialog>
      </Wrapper>
    );

    const button = screen.getByRole('button', { name: '로그인하여 후원하기' });
    fireEvent.click(button);

    // 다이얼로그가 열렸는지 확인
    expect(screen.getByText('프로젝트 후원')).toBeInTheDocument();
    
    // 후원금액 입력 필드 확인
    const amountInput = screen.getByLabelText('후원금액 (원)');
    expect(amountInput).toBeInTheDocument();
    
    // 후원하기버튼 클릭
    const submitButtons = screen.getAllByRole('button', { name: '후원하기' });
    if (submitButtons.length > 1) {
      const submitButton = submitButtons[1]; // 다이얼로그 내부의 버튼
      fireEvent.click(submitButton);
    } else {
      const submitButton = submitButtons[0];
      fireEvent.click(submitButton);
    }

    // 로그인 호출 메시지 확인 (실제 컴포넌트에서 표시하는 경우)
    // expect(mockSignIn).toHaveBeenCalledWith(undefined, { callbackUrl: 'http://localhost/test' });
  });

  it('prefills session data and surfaces auth guidance on 401', async () => {
    const client = new QueryClient();
    const Wrapper = createWrapper(client);

    // Mock 401 response
    mockFetch.mockResolvedValueOnce({
      ok: false,
      status: 401,
      json: () => Promise.resolve({ error: 'Unauthorized' })
    });

    render(
      <Wrapper>
        <FundingDialog project={mockProject}>
          <button>후원하기</button>
        </FundingDialog>
      </Wrapper>
    );

    const button = screen.getByRole('button', { name: '후원하기' });
    fireEvent.click(button);

    await waitFor(() => {
      expect(screen.getByText('프로젝트 후원')).toBeInTheDocument();
    });

    const amountInput = screen.getByLabelText('후원금액 (원)');
    const submitButtons = screen.getAllByRole('button', { name: '후원하기' });
    const submitButton = submitButtons.length > 1 ? submitButtons[1] : submitButtons[0];

    fireEvent.change(amountInput, { target: { value: '10000' } });
    fireEvent.click(submitButton);

    await waitFor(() => {
      expect(mockFetch).toHaveBeenCalled();
    });
  });

  it('handles successful funding submission', async () => {
    const client = new QueryClient();
    const Wrapper = createWrapper(client);

    // Mock successful response
    mockFetch.mockResolvedValueOnce({
      ok: true,
      json: () => Promise.resolve({ success: true, fundingId: 'funding-1' })
    });

    render(
      <Wrapper>
        <FundingDialog project={mockProject}>
          <button>후원하기</button>
        </FundingDialog>
      </Wrapper>
    );

    const button = screen.getByRole('button', { name: '후원하기' });
    fireEvent.click(button);

    await waitFor(() => {
      expect(screen.getByText('프로젝트 후원')).toBeInTheDocument();
    });

    const amountInput = screen.getByLabelText('후원금액 (원)');
    const submitButtons = screen.getAllByRole('button', { name: '후원하기' });
    const submitButton = submitButtons.length > 1 ? submitButtons[1] : submitButtons[0];

    fireEvent.change(amountInput, { target: { value: '10000' } });
    fireEvent.click(submitButton);

    await waitFor(() => {
      expect(mockFetch).toHaveBeenCalled();
    });
  });
});