const { PrismaClient } = require('@prisma/client');

async function validateSchema() {
  const prisma = new PrismaClient();
  
  try {
    await prisma.$connect();
    console.log('‚úÖ Database connected successfully');
    
    // Î™®Îì† ÌÖåÏù¥Î∏î Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
    const tables = await prisma.$queryRaw`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' AND table_type = 'BASE TABLE'
      ORDER BY table_name;
    `;
    
    console.log('üìã Database tables:');
    tables.forEach(table => {
      console.log(`  - ${table.table_name}`);
    });
    
    // Prisma Ïä§ÌÇ§ÎßàÏóêÏÑú Ï†ïÏùòÎêú Î™®Îç∏Îì§Í≥º ÎπÑÍµê
    const prismaModels = [
      'User', 'Project', 'ProjectCollaborator', 'AuthDevice', 'AuthSession', 'RefreshToken',
      'TokenBlacklist', 'Funding', 'Settlement', 'Partner', 'PartnerMatch', 'Product',
      'Order', 'OrderItem', 'Post', 'Comment', 'PostLike', 'PostDislike', 'CommentReaction',
      'Notification', 'VisitLog', 'Wallet', 'AuditLog', 'Permission', 'UserPermission',
      'PaymentTransaction', 'SettlementPayout', 'ProjectMilestone', 'ProjectRewardTier',
      'ProjectRequirement', 'UserFollow', 'ModerationReport', 'UserBlock'
    ];
    
    console.log('\nüîç Checking model-table alignment:');
    const dbTableNames = tables.map(t => t.table_name);
    
    for (const model of prismaModels) {
      if (dbTableNames.includes(model)) {
        console.log(`  ‚úÖ ${model} - exists in database`);
      } else {
        console.log(`  ‚ùå ${model} - missing in database`);
      }
    }
    
    // Ï£ºÏöî ÌÖåÏù¥Î∏îÎì§Ïùò Ïª¨Îüº Íµ¨Ï°∞ ÌôïÏù∏
    console.log('\nüìù Checking key table structures:');
    
    // Post ÌÖåÏù¥Î∏î ÌôïÏù∏
    const postColumns = await prisma.$queryRaw`
      SELECT column_name, data_type, is_nullable, column_default
      FROM information_schema.columns 
      WHERE table_name = 'Post' AND table_schema = 'public'
      ORDER BY ordinal_position;
    `;
    
    console.log('\nüìÑ Post table columns:');
    postColumns.forEach(col => {
      console.log(`  - ${col.column_name}: ${col.data_type} (nullable: ${col.is_nullable}, default: ${col.column_default || 'none'})`);
    });
    
    // User ÌÖåÏù¥Î∏î ÌôïÏù∏
    const userColumns = await prisma.$queryRaw`
      SELECT column_name, data_type, is_nullable, column_default
      FROM information_schema.columns 
      WHERE table_name = 'User' AND table_schema = 'public'
      ORDER BY ordinal_position;
    `;
    
    console.log('\nüë§ User table columns:');
    userColumns.forEach(col => {
      console.log(`  - ${col.column_name}: ${col.data_type} (nullable: ${col.is_nullable}, default: ${col.column_default || 'none'})`);
    });
    
    // VisitLog ÌÖåÏù¥Î∏î ÌôïÏù∏
    const visitLogColumns = await prisma.$queryRaw`
      SELECT column_name, data_type, is_nullable, column_default
      FROM information_schema.columns 
      WHERE table_name = 'VisitLog' AND table_schema = 'public'
      ORDER BY ordinal_position;
    `;
    
    console.log('\nüìä VisitLog table columns:');
    visitLogColumns.forEach(col => {
      console.log(`  - ${col.column_name}: ${col.data_type} (nullable: ${col.is_nullable}, default: ${col.column_default || 'none'})`);
    });
    
    // ENUM ÌÉÄÏûÖÎì§ ÌôïÏù∏
    const enums = await prisma.$queryRaw`
      SELECT typname, enumlabel
      FROM pg_type t 
      JOIN pg_enum e ON t.oid = e.enumtypid
      WHERE t.typname LIKE '%Role%' OR t.typname LIKE '%Status%' OR t.typname LIKE '%Type%'
      ORDER BY t.typname, e.enumsortorder;
    `;
    
    console.log('\nüè∑Ô∏è Database ENUM types:');
    const enumMap = {};
    enums.forEach(enumItem => {
      if (!enumMap[enumItem.typname]) {
        enumMap[enumItem.typname] = [];
      }
      enumMap[enumItem.typname].push(enumItem.enumlabel);
    });
    
    Object.keys(enumMap).forEach(enumName => {
      console.log(`  - ${enumName}: [${enumMap[enumName].join(', ')}]`);
    });
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

validateSchema();
